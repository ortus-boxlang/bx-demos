class {

	property name="postDirectory" type="string";

	private function fmParse(s) {
		data = {};
		fm = s.reFind('---(.*?)---(.*)', 1, true);
		/*
		I'm a bit rusty on reFind, but fm.match will be an array where [2] is the str I want.
		I'm not 100% confident of this
		*/
		//writedump(fm);
		if(fm.match.len() != 3) {
			return { data:{}, contents:markdown(s) };
		}
		
		data.append(yamlDeserialize(fm.match[2]));

		content = fm.match[3];

		return { data:data, contents:markdown(content) }
	}

	public function getPosts() {

		blogCache = cache();
		return blogCache.getOrSet('postCache', () => {
			println('not in cache');
			posts = [];
			postFiles = directoryList(path=variables.postDirectory, recurse=true, filter="*.md");

			postFiles.each(p => {
				contents = fileRead(p);
				post = fmParse(contents);
				// parse .date to a full date
				post.data.date = parseDateTime(post.data.date);
				posts.append(post);
			});

			// do a quick date sort
			posts.sort(function(a,b) {
				return dateCompare(b.data.date, a.data.date);
			});

			return posts;
		}, 60 * 60);

	}

	public function findPostByPermalink(permalink) {
		posts = getPosts();
		match = posts.find(p => {
			return p.data.permalink === permalink;
		});
		if(match === 0) return;
		else return posts[match];

	}
}