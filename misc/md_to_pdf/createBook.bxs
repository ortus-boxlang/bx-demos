/*
This example demonstrates creating a pdf 'book' from Markdown files. We 
take a directory of MD files, convert to HTML, then to PDF.
*/

/*
* Given an input string we look for, on top, ---, then X=Y data, then ---
* For each file, we attempt to read the front matter data, and 'glob' on the global data
*/
function fmParse(s, global) {
	fm = s.reFind('---(.*?)---(.*)', 1, true);
	/*
	I'm a bit rusty on reFind, but fm.match will be an array where [2] is the str I want.
	I'm not 100% confident of this
	*/
	//writedump(fm);
	if(fm.match.len() != 3) {
		return { data:global, contents:markdown(s) };
	}
	
	data = global.copy();
	data.append(yamlDeserialize(fm.match[2]));

	content = fm.match[3];
	// do simple X/Y replacement of tokens in content
	for(key in data) {
		content = content.rereplace('{{\s*#key#\s*}}', data[key], 'all');
	}

	return { data:data, contents:markdown(content) }
}

sourceDir = './mdsource';
mdSource = directoryList(path=sourceDir,filter='*.md');

globalData = jsonDeserialize(fileRead('./data.json'));
println('Our source directory, #sourceDir#, has #mdSource.len()# md files.');

htmlParts = [];

mdSource.each(m => {
	contents = fileRead(m);
	// split out front matter as meta data and get contents
	data = fmParse(contents, globalData);
	htmlParts.append(data);
});

//writedump(htmlParts);
//abort;

bx:document format="pdf" filename="book.pdf" overwrite=true bookmarks=true {

	bx:documentitem type="header"  {
		bookTitle = globalData?.title ?: '';
		writeoutput('<p style="text-align:right;font-size:10px">#bookTitle#</p>')
	}

	htmlParts.each(part => {

		title = part.data?.title ?: 'No Title';
		bx:documentsection name=title  {
			writeoutput(part.contents);
		}
	});

	bx:documentitem type="footer"  {
		writeoutput('<p style="text-align:right;font-size:10px">Page #bxdocument.currentpagenumber# of 
#bxdocument.totalpages#</p>')
	}

}

println('Done');