class {

	property name="handle" type="string";
	property name="password" type="string";
	property name="token" type="string";

	public function login() {

		checkAuth();

		body = {
			identifier: variables.handle,
			password: variables.password
		};

		bx:http url="https://bsky.social/xrpc/com.atproto.server.createSession" method="post" result="result" {
			bx:httpparam type="header" name="Content-Type" value="application/json";
			bx:httpparam type="body" value="#body.toJSON()#";
		}

		if(result.statusCode != 200) {
			throw("Authentication credentials were not valid.");
		}

		auth = result.fileContent.fromJSON();

		variables.token = auth.accessJwt;
		return true;

	}

	/*
	To use an image (soon to be an array), you must pass a structure that contains:
	.src=binary data of the image
	.alt=alt text. Technically alt text isn't required by the API, but you *should* use it
	*/
	public function post(required string msg, struct image) {
		checkAuth();

		body = {
			repo:"raymondcamden.com", 
			collection:"app.bsky.feed.post", 
			record: {
				text:msg,
				createdAt: now().format("iso")
			}
		};

		if(arguments.keyExists("image")) {
			if(!arguments.image.keyExists("src") || !arguments.image.keyExists("alt")) {
				throw("When passing an image to post, you must include src and alt values.");
			}

			bx:http url="https://bsky.social/xrpc/com.atproto.repo.uploadBlob" method="post" result="result" {
				bx:httpparam type="header" name="Authorization" value="Bearer #variables.token#";
				bx:httpparam type="header" name="Content-Type" value="image/jpeg";
				bx:httpparam type="body" value="#image.src#";
			}

			fileResult = result.fileContent.fromJSON();

			body.record.embed = {
				"$type": "app.bsky.embed.images",
				images: [
					{
						alt:image.alt,
						image: fileResult.blob
					}
				]
			}
		}

		bx:http url="https://bsky.social/xrpc/com.atproto.repo.createRecord" method="post" result="result" {
			bx:httpparam type="header" name="Authorization" value="Bearer #variables.token#";
			bx:httpparam type="header" name="Content-Type" value="application/json";
			bx:httpparam type="body" value="#body.toJSON()#";
		}

		return result.fileContent;
	}

	/*
	* Utility function to ensure auth is set. In the future, I'm going to allow this to refresh tokens.
	*/
	private function checkAuth() {
		if(variables.handle == "" || variables.password == "") {
			throw("Component initialized with blank, or missing, handle and password values.");
		}
	}
}